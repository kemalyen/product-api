openapi: 3.0.3
info:
  title: ProductApi
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://api.test'
paths:
  /api/register:
    post:
      summary: 'Register a user'
      operationId: registerAUser
      description: ''
      parameters: []
      responses:
        201:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '"message": "The account is created"'
      tags:
        - Authentication
      security: []
  /api/token:
    post:
      summary: 'Get access token for a user'
      operationId: getAccessTokenForAUser
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n{\n\"success\": {\n\"token\": \"{YOUR_AUTH_KEY}\"\n}\n}"
      tags:
        - Authentication
      security: []
  /api/categories:
    get:
      summary: 'List all categories'
      operationId: listAllCategories
      description: ''
      parameters:
        -
          in: query
          name: sort
          description: 'by category name'
          example: deleniti
          required: false
          schema:
            type: string
            description: 'by category name'
            example: deleniti
        -
          in: query
          name: 'filter[title]'
          description: 'Filter by name. Wildcards are supported.'
          example: '*fix*'
          required: false
          schema:
            type: string
            description: 'Filter by name. Wildcards are supported.'
            example: '*fix*'
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Category API Resource'
      security: []
    post:
      summary: 'Create a new category'
      operationId: createANewCategory
      description: ''
      parameters: []
      responses:
        201:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{ {\n\"data\": {\n\"type\": \"category\",\n\"id\": 5,\n\"attributes\": {\n\"name\": \"A test category\"\n}\n}\n}}"
      tags:
        - 'Category API Resource'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 50 characters.'
                  example: pvoxqhdbkieut
              required:
                - name
      security: []
  '/api/categories/{id}':
    get:
      summary: 'View a category'
      operationId: viewACategory
      description: 'Display a individual category data.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Category API Resource'
      security: []
    put:
      summary: 'Update a category'
      operationId: updateACategory
      description: 'Update the specified category'
      parameters: []
      responses: {  }
      tags:
        - 'Category API Resource'
      security: []
    delete:
      summary: 'Delete a category.'
      operationId: deleteACategory
      description: 'Remove the category resource'
      parameters: []
      responses: {  }
      tags:
        - 'Category API Resource'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the category.'
        example: 1
        required: true
        schema:
          type: integer
  /api/products:
    get:
      summary: 'List all products'
      operationId: listAllProducts
      description: ''
      parameters:
        -
          in: query
          name: sort
          description: 'by product name, status, published date, created date and updated date'
          example: doloribus
          required: false
          schema:
            type: string
            description: 'by product name, status, published date, created date and updated date'
            example: doloribus
        -
          in: query
          name: 'filter[status]'
          description: 'Filter by status: A,P,X'
          example: quibusdam
          required: false
          schema:
            type: string
            description: 'Filter by status: A,P,X'
            example: quibusdam
        -
          in: query
          name: 'filter[title]'
          description: 'Filter by name. Wildcards are supported.'
          example: '*fix*'
          required: false
          schema:
            type: string
            description: 'Filter by name. Wildcards are supported.'
            example: '*fix*'
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Product API Resource'
      security: []
    post:
      summary: 'Create a new product'
      operationId: createANewProduct
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Product API Resource'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: ohltw
                sku:
                  type: string
                  description: 'Must not be greater than 25 characters.'
                  example: ytjlsuiuitdge
                barcode:
                  type: string
                  description: 'Must not be greater than 25 characters.'
                  example: eufosscfbwp
                publishedAt:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2024-05-21T20:35:16'
                status:
                  type: string
                  description: ''
                  example: A
                  enum:
                    - A
                    - P
                    - X
                quantity:
                  type: integer
                  description: ''
                  example: 15
                price:
                  type: number
                  description: ''
                  example: 22064.919
              required:
                - name
                - sku
                - barcode
                - publishedAt
                - status
      security: []
  '/api/products/{id}':
    get:
      summary: 'View a product'
      operationId: viewAProduct
      description: 'Display a individual product data.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Product API Resource'
      security: []
    put:
      summary: 'Update a product'
      operationId: updateAProduct
      description: 'Update the specified product'
      parameters: []
      responses: {  }
      tags:
        - 'Product API Resource'
      security: []
    delete:
      summary: 'Delete a product.'
      operationId: deleteAProduct
      description: 'Remove the product resource'
      parameters: []
      responses: {  }
      tags:
        - 'Product API Resource'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the product.'
        example: 1
        required: true
        schema:
          type: integer
tags:
  -
    name: Authentication
    description: ''
  -
    name: 'Category API Resource'
    description: ''
  -
    name: 'Product API Resource'
    description: ''
