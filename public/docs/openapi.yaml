openapi: 3.0.3
info:
  title: ProductApi
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://api.test'
paths:
  /api/accounts:
    get:
      summary: 'List all accounts'
      operationId: listAllAccounts
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Account API Resource'
      security: []
    post:
      summary: 'Create a new account'
      operationId: createANewAccount
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Account API Resource'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 50 characters.'
                  example: ayfmeeefrzovayzb
                  nullable: false
                account_number:
                  type: string
                  description: 'Must be between 2 and 10 digits.'
                  example: '131'
                  nullable: false
                status:
                  type: string
                  description: ''
                  example: active
                  nullable: false
                  enum:
                    - active
                    - pending
                    - disabled
              required:
                - name
                - account_number
                - status
      security: []
  '/api/accounts/{id}':
    get:
      summary: 'View a account'
      operationId: viewAAccount
      description: 'Display a individual account data.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Account API Resource'
      security: []
    put:
      summary: 'Update a account'
      operationId: updateAAccount
      description: 'Update the specified account'
      parameters: []
      responses: {  }
      tags:
        - 'Account API Resource'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: reiciendis
                  nullable: false
                account_number:
                  type: string
                  description: ''
                  example: eum
                  nullable: false
              required:
                - name
                - account_number
      security: []
    delete:
      summary: 'Delete a account.'
      operationId: deleteAAccount
      description: 'Remove the account resource'
      parameters: []
      responses: {  }
      tags:
        - 'Account API Resource'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the account.'
        example: 1
        required: true
        schema:
          type: integer
  /api/token:
    post:
      summary: 'Get access token for a user'
      operationId: getAccessTokenForAUser
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n{\n  \"success\": {\n     \"token\": \"{YOUR_AUTH_KEY}\"\n}\n}"
      tags:
        - Authentication
      security: []
  /api/categories:
    get:
      summary: 'List all categories'
      operationId: listAllCategories
      description: ''
      parameters:
        -
          in: query
          name: sort
          description: 'by category name'
          example: pariatur
          required: false
          schema:
            type: string
            description: 'by category name'
            example: pariatur
            nullable: false
        -
          in: query
          name: 'filter[title]'
          description: 'Filter by name. Wildcards are supported.'
          example: '*fix*'
          required: false
          schema:
            type: string
            description: 'Filter by name. Wildcards are supported.'
            example: '*fix*'
            nullable: false
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Category API Resource'
      security: []
    post:
      summary: 'Create a new category'
      operationId: createANewCategory
      description: ''
      parameters: []
      responses:
        201:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{ {\n\"data\": {\n\"type\": \"category\",\n\"id\": 5,\n\"attributes\": {\n\"name\": \"A test category\"\n}\n}\n}}"
      tags:
        - 'Category API Resource'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 50 characters.'
                  example: xhxilzhulre
                  nullable: false
              required:
                - name
      security: []
  '/api/categories/{id}':
    get:
      summary: 'View a category'
      operationId: viewACategory
      description: 'Display a individual category data.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Category API Resource'
      security: []
    put:
      summary: 'Update a category'
      operationId: updateACategory
      description: 'Update the specified category'
      parameters: []
      responses: {  }
      tags:
        - 'Category API Resource'
      security: []
    delete:
      summary: 'Delete a category.'
      operationId: deleteACategory
      description: 'Remove the category resource'
      parameters: []
      responses: {  }
      tags:
        - 'Category API Resource'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the category.'
        example: 1
        required: true
        schema:
          type: integer
  /api/me:
    get:
      summary: ''
      operationId: getApiMe
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
  '/api/accounts/{account_id}/price/{product_id}':
    patch:
      summary: ''
      operationId: patchApiAccountsAccount_idPriceProduct_id
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                price:
                  type: number
                  description: ''
                  example: 44463026.543621
                  nullable: false
              required:
                - price
      security: []
    parameters:
      -
        in: path
        name: account_id
        description: 'The ID of the account.'
        example: 1
        required: true
        schema:
          type: integer
      -
        in: path
        name: product_id
        description: 'The ID of the product.'
        example: 1
        required: true
        schema:
          type: integer
  /api/products:
    get:
      summary: 'List all products'
      operationId: listAllProducts
      description: ''
      parameters:
        -
          in: query
          name: sort
          description: 'by product name, status, published date, created date and updated date'
          example: cum
          required: false
          schema:
            type: string
            description: 'by product name, status, published date, created date and updated date'
            example: cum
            nullable: false
        -
          in: query
          name: 'filter[status]'
          description: 'Filter by status: A,P,X'
          example: ut
          required: false
          schema:
            type: string
            description: 'Filter by status: A,P,X'
            example: ut
            nullable: false
        -
          in: query
          name: 'filter[title]'
          description: 'Filter by name. Wildcards are supported.'
          example: '*fix*'
          required: false
          schema:
            type: string
            description: 'Filter by name. Wildcards are supported.'
            example: '*fix*'
            nullable: false
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Product API Resource'
      security: []
    post:
      summary: 'Create a new product'
      operationId: createANewProduct
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Product API Resource'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: rqer
                  nullable: false
                sku:
                  type: string
                  description: 'Must not be greater than 25 characters.'
                  example: wwoqaqwmkefww
                  nullable: false
                barcode:
                  type: string
                  description: 'Must not be greater than 25 characters.'
                  example: mkoownjrmvkcy
                  nullable: false
                publishedAt:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2024-11-15T20:20:16'
                  nullable: false
                status:
                  type: string
                  description: ''
                  example: A
                  nullable: false
                  enum:
                    - A
                    - P
                    - X
                quantity:
                  type: integer
                  description: ''
                  example: 4
                  nullable: false
                price:
                  type: number
                  description: ''
                  example: 425.98042
                  nullable: false
                category_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the categories table.'
                  example: eos
                  nullable: false
              required:
                - name
                - sku
                - barcode
                - publishedAt
                - status
                - category_id
      security: []
  '/api/products/{id}':
    get:
      summary: 'View a product'
      operationId: viewAProduct
      description: 'Display a individual product data.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Product API Resource'
      security: []
    put:
      summary: 'Update a product'
      operationId: updateAProduct
      description: 'Update the specified product'
      parameters: []
      responses: {  }
      tags:
        - 'Product API Resource'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: ionwbieyvlybglvw
                  nullable: false
                sku:
                  type: string
                  description: ''
                  example: et
                  nullable: false
                barcode:
                  type: string
                  description: ''
                  example: et
                  nullable: false
                publishedAt:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2024-11-15T20:20:16'
                  nullable: false
                status:
                  type: string
                  description: ''
                  example: P
                  nullable: false
                  enum:
                    - A
                    - P
                    - X
                quantity:
                  type: integer
                  description: ''
                  example: 9
                  nullable: false
                price:
                  type: number
                  description: ''
                  example: 3824376.9
                  nullable: false
                category_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the categories table.'
                  example: voluptatem
                  nullable: false
              required:
                - name
                - sku
                - barcode
                - publishedAt
                - status
                - category_id
      security: []
    delete:
      summary: 'Delete a product.'
      operationId: deleteAProduct
      description: 'Remove the product resource'
      parameters: []
      responses: {  }
      tags:
        - 'Product API Resource'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the product.'
        example: 1
        required: true
        schema:
          type: integer
  /api/users:
    get:
      summary: 'List all users'
      operationId: listAllUsers
      description: ''
      parameters:
        -
          in: query
          name: sort
          description: 'by user name and email'
          example: nulla
          required: false
          schema:
            type: string
            description: 'by user name and email'
            example: nulla
            nullable: false
        -
          in: query
          name: 'filter[name]'
          description: 'Filter by name. Wildcards are supported.'
          example: '*fix*'
          required: false
          schema:
            type: string
            description: 'Filter by name. Wildcards are supported.'
            example: '*fix*'
            nullable: false
        -
          in: query
          name: 'filter[email]'
          description: 'Filter by email. Wildcards are supported.'
          example: '*fix*'
          required: false
          schema:
            type: string
            description: 'Filter by email. Wildcards are supported.'
            example: '*fix*'
            nullable: false
        -
          in: query
          name: 'filter[role]'
          description: 'Filter by role. Wildcards are NOT supported.'
          example: 0
          required: false
          schema:
            type: integer
            description: 'Filter by role. Wildcards are NOT supported.'
            example: 0
            nullable: false
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'User API Resource'
      security: []
    post:
      summary: 'Create a new user'
      operationId: createANewUser
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User API Resource'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: oxpnsqfxtzztixjogbcqpa
                  nullable: false
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: christine.auer@example.net
                  nullable: false
                password:
                  type: string
                  description: ''
                  example: 'z{L@SW6\,wo]W'
                  nullable: false
                role:
                  type: string
                  description: ''
                  example: 'Account Admin'
                  nullable: false
                  enum:
                    - Admin
                    - 'Account Admin'
                    - 'Account User'
                    - 'Account Api User'
                account_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the accounts table.'
                  example: null
                  nullable: false
              required:
                - name
                - email
                - password
                - role
      security: []
  '/api/users/{id}':
    get:
      summary: 'View an user'
      operationId: viewAnUser
      description: 'Display an user with relational data.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'User API Resource'
      security: []
    put:
      summary: 'Update a user'
      operationId: updateAUser
      description: 'Update the specified user'
      parameters: []
      responses: {  }
      tags:
        - 'User API Resource'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: jqwsivgrp
                  nullable: false
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: ylittel@example.net
                  nullable: false
                password:
                  type: string
                  description: ''
                  example: "l$q-'8ha<O;h)"
                  nullable: false
                role:
                  type: string
                  description: ''
                  example: 'Account Api User'
                  nullable: false
                  enum:
                    - Admin
                    - 'Account Admin'
                    - 'Account User'
                    - 'Account Api User'
                account_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the accounts table.'
                  example: null
                  nullable: false
              required:
                - name
                - email
                - password
                - role
      security: []
    delete:
      summary: 'Delete a user.'
      operationId: deleteAUser
      description: 'Remove the user resource'
      parameters: []
      responses: {  }
      tags:
        - 'User API Resource'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user.'
        example: 1
        required: true
        schema:
          type: integer
tags:
  -
    name: 'Account API Resource'
    description: ''
  -
    name: Authentication
    description: ''
  -
    name: 'Category API Resource'
    description: ''
  -
    name: Endpoints
    description: ''
  -
    name: 'Product API Resource'
    description: ''
  -
    name: 'User API Resource'
    description: ''
